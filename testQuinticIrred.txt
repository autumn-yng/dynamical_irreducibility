// Number Theory Conference Research code
// Autumn Nguyen
// Last updated: Dec 2024

function testQuinticIrred(prime, numIters)
// prime is the prime for the field F_p we are evaluating the quintics over
// numIters is the number of iterations we want to check for irreducibility

	function polyTest(p)
	// Compute all polynomials in a finite field F_p
		All:=[];
		R<x>:=PolynomialRing(FiniteField(p));
		for a in [0..(p-1)] do
			for b in [0..(p-1)] do
				f:=x^5 + a*x + b;
				All:=Append(All,f);
			end for;
		end for;
		return All;
	end function;

	function iterate(f,n)
	// Compute the n-th iterate of a polynomial f
		if n eq 1 then
			return f;
		elif n eq 2 then
			f1:=f;
			f2:=Evaluate(f, f1);
			return f2;
		else
			for i in [1..(n-2)] do
				n:=n-1;
				fn:=Evaluate(f, iterate(f,n));
				return fn;
			end for;
		end if;
	end function;

	
	function main(prevIrreducList, n)
	// prevIrreducList: a list of polynomials to be iterated over
	// n: the number of iterates to do to the polynomials to check for dynamical irreducibility 
	// Note: one iterate here means f(f(x)), different with iterate in the context of the loops in the code
		for i in [1..n] do
			Reduc:=[];
			Irreduc:=[];
			for poly in prevIrreducList do
				if IsIrreducible(iterate(poly,i)) then // if the ith iterate of this polynomial is irreducible, add to Irreduc to print out
					Irreduc:=Append(Irreduc, poly);
				end if;
			end for;

			printf "Quintics of form x^p + ax + b over finite field Fp, for p=%o, NOT reducible after %o iterate:\n%o\n", p, i, Irreduc;

			prevIrreducList := Irreduc; // Shrink down the list of polynomials to do the next iterate to save computation power (since the polynomials that are already reducible in the ith iterate will definitely not be dynamically irreducible )

		end for;
		return "Done";
	end function;

	All:=polyTest(prime);
	return main(All, numIters);

end function;